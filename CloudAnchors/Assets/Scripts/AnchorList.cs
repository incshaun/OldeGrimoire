using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;
using GoogleARCore;
using GoogleARCore.CrossPlatform;

// Keep a list of cloud anchor IDs and have these shared between
// all clients.
public class AnchorList : NetworkBehaviour {
  
  // The details of an anchor: the cloud ID, and the 
  // custom properties of the object at that ID.
  public class AnchorDetails : MessageBase
  {
    public string anchor;
    public string objectAtAnchor;
  }
  
  // Debugging/logging message.
  private Text monitor;
  
  [Tooltip ("The object created to mark each anchor. Should have a text child object")]
  public GameObject markerPrefab;
  
  // Some autogenerated text to label each marker in sequence.
  private string counterName;
  private int counter = 0;
  
  // The list of known anchors (both on server and each client).
  private List<AnchorDetails> anchorDetails = new List<AnchorDetails> ();
  
  // A message type used to send updates to each client.
  private short AnchorMessageType = MsgType.Highest + 1;
  
  void Awake ()
  {
    // Create a new label for markers that is unique to this session.
    string consonants = "bcdfghjklmnpqrstwz";
    string vowels = "aeiouy";    
    counterName = "" + System.Char.ToUpper (consonants[Random.Range (0, consonants.Length)]) + vowels[Random.Range (0, vowels.Length)] + consonants[Random.Range (0, consonants.Length)];
    
    // Find the debugging message.
    monitor = GameObject.Find ("MonitorText").GetComponent <Text> ();
    
    if (isLocalPlayer)
    {
      // Find the component that adds anchors, and inform them where to find this service.
      AnchorInteraction anchorAdder = GameObject.Find ("AnchorAdder").GetComponent <AnchorInteraction> ();
      anchorAdder.anchorList = this;
    }
  }
  
  // Get a new ID for each marker created.
  public string getLabel ()
  {
    counter += 1;
    return counterName + " " + counter;
  }
  
  // Copy an anchor into the cloud service. Call havePlaced when complete.
  public void createCloudAnchor (string label, Anchor anchor)
  {
    AsyncTask <CloudAnchorResult> done = XPSession.CreateCloudAnchor ((Anchor) anchor);
    done.ThenAction (x => havePlaced (label, x));
  }
  
  // Confirm that the anchor has been placed.
  public void havePlaced (string label, CloudAnchorResult result)
  {
    // Send the anchor details to the server.
    CmdAddAnchor (result.Anchor.CloudId, label);
    monitor.text = "Anchor added to cloud: " + result.Response + "\n" + result.Anchor.CloudId;
  }
  
  // Make sure cloud anchors are persistent. On the server, read all the anchors from file.
  private void retrieveAnchors ()
  {
    string anchorID = "";
    string objectID = "";
    StreamReader file = new StreamReader (Application.persistentDataPath + "/" + "cid.txt");
    while ((anchorID = file.ReadLine ()) != null)
    {
      objectID = file.ReadLine ();
      updateList (anchorID, objectID);
      monitor.text = "Retrieving anchor " + anchorID;
    }
    file.Close ();
  }

  // Make sure cloud anchors are persistent. On the server, write them all to file.
  private void persistList ()
  {
    if (isServer)
    {
      StreamWriter file = new StreamWriter (Application.persistentDataPath + "/" + "cid.txt", false);
      monitor.text = "";
      for (int i = 0; i < anchorDetails.Count; i++)
      {
        file.WriteLine (anchorDetails[i].anchor);
        file.WriteLine (anchorDetails[i].objectAtAnchor);
      }
      file.Close ();
    }
  }
  
  // When the server starts, read previously known anchors from file.
  public override void OnStartServer()
  {
    if (isServer)
    {
      retrieveAnchors ();	
    }
  }
  
  // When the client starts, set up the event handler for new anchor messages.
  public override void OnStartClient()
  {
    if (isClient)
    {
      NetworkManager.singleton.client.RegisterHandler (AnchorMessageType, clientUpdate);
    }
  }
  
  // When a new anchor ID is received, retrieve it from the cloud.
  private void clientUpdate (NetworkMessage m)
  {
    AnchorDetails amt = m.ReadMessage <AnchorDetails> ();
    if (findInList (amt.anchor) == null)
    {
      monitor.text = "Retrieving cloud anchor " + amt.anchor;
      AsyncTask <CloudAnchorResult> done = XPSession.ResolveCloudAnchor (amt.anchor);
      done.ThenAction (x => gotAnchor (amt.objectAtAnchor, x));

      updateList (amt.anchor, amt.objectAtAnchor);
    }    
  }
  
  // When a response from the cloud service is received, create the marker.
  public void gotAnchor (string label, CloudAnchorResult result)
  {
    if (result.Response == CloudServiceResponse.Success)
    {
      monitor.text = "Got anchor " + result.Response + "\n" + result.Anchor.CloudId;
      
      GameObject obj = addInstanceToAnchor (label, result.Anchor.transform, result.Anchor.transform.position, result.Anchor.transform.rotation);
      obj.GetComponent <MeshRenderer> ().material.color = new Color (0,1,0);
    }
  }
  
  // Create a new marker.
  public GameObject addInstanceToAnchor (string label, Transform parent, Vector3 position, Quaternion orientation)
  {
    GameObject obj = Instantiate(markerPrefab, position, orientation);
    obj.GetComponentInChildren <TextMesh> ().text = label;
    obj.transform.parent = parent;
    return obj;
  }
  
  // Send updates every few seconds.  
  private float timer = 0;
  
  void Update () {
    timer += Time.deltaTime;
    if (timer > 3.0f)
    {
      if (isServer)
      {
        // Send anchors to all clients.
        for (int i = 0; i < anchorDetails.Count; i++)
        {
          NetworkServer.SendToAll (AnchorMessageType, anchorDetails[i]);
        }
      }
    }
  }
  
  // Look for a given anchor ID in the list of anchors.
  public AnchorDetails findInList (string details)
  {
    for (int i = 0; i < anchorDetails.Count; i++)
    {
      if (anchorDetails[i].anchor == details)
      {
        return anchorDetails[i];
      }
    }
    return null;
  }
  
  // Update the anchor ID, create a new one if it does not exist.
  public void updateList (string details, string identifier)
  {
    AnchorDetails d = findInList (details);
    if (d == null)
    {
      d = new AnchorDetails ();
      d.anchor = details;
      anchorDetails.Add (d);
    }
    d.objectAtAnchor = identifier;
  }

  // Update the list of anchors on the server.
  [Command]
  private void CmdAddAnchor (string anchor, string identifier)
  {
    updateList (anchor, identifier);
    persistList ();
  }
}
